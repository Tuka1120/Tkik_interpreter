# Generated from EnglishLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,208,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,3,1,3,1,4,1,4,1,5,4,5,77,8,5,11,5,12,5,78,1,5,1,5,4,5,83,
        8,5,11,5,12,5,84,3,5,87,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        3,6,98,8,6,1,7,1,7,1,7,5,7,103,8,7,10,7,12,7,106,9,7,1,8,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,
        12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,4,
        25,203,8,25,11,25,12,25,204,1,25,1,25,0,0,26,1,1,3,2,5,3,7,0,9,0,
        11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,
        35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,1,0,3,1,0,
        48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,212,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,3,56,1,0,0,0,5,63,
        1,0,0,0,7,71,1,0,0,0,9,73,1,0,0,0,11,76,1,0,0,0,13,97,1,0,0,0,15,
        99,1,0,0,0,17,107,1,0,0,0,19,112,1,0,0,0,21,118,1,0,0,0,23,124,1,
        0,0,0,25,135,1,0,0,0,27,139,1,0,0,0,29,142,1,0,0,0,31,146,1,0,0,
        0,33,149,1,0,0,0,35,156,1,0,0,0,37,166,1,0,0,0,39,179,1,0,0,0,41,
        181,1,0,0,0,43,183,1,0,0,0,45,191,1,0,0,0,47,193,1,0,0,0,49,197,
        1,0,0,0,51,202,1,0,0,0,53,54,5,98,0,0,54,55,5,101,0,0,55,2,1,0,0,
        0,56,57,5,110,0,0,57,58,5,117,0,0,58,59,5,109,0,0,59,60,5,98,0,0,
        60,61,5,101,0,0,61,62,5,114,0,0,62,4,1,0,0,0,63,64,5,98,0,0,64,65,
        5,111,0,0,65,66,5,111,0,0,66,67,5,108,0,0,67,68,5,101,0,0,68,69,
        5,97,0,0,69,70,5,110,0,0,70,6,1,0,0,0,71,72,7,0,0,0,72,8,1,0,0,0,
        73,74,7,1,0,0,74,10,1,0,0,0,75,77,3,7,3,0,76,75,1,0,0,0,77,78,1,
        0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,86,1,0,0,0,80,82,5,46,0,0,81,
        83,3,7,3,0,82,81,1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,
        0,85,87,1,0,0,0,86,80,1,0,0,0,86,87,1,0,0,0,87,12,1,0,0,0,88,89,
        5,116,0,0,89,90,5,114,0,0,90,91,5,117,0,0,91,98,5,101,0,0,92,93,
        5,102,0,0,93,94,5,97,0,0,94,95,5,108,0,0,95,96,5,115,0,0,96,98,5,
        101,0,0,97,88,1,0,0,0,97,92,1,0,0,0,98,14,1,0,0,0,99,104,3,9,4,0,
        100,103,3,9,4,0,101,103,3,7,3,0,102,100,1,0,0,0,102,101,1,0,0,0,
        103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,16,1,0,0,0,106,
        104,1,0,0,0,107,108,5,112,0,0,108,109,5,108,0,0,109,110,5,117,0,
        0,110,111,5,115,0,0,111,18,1,0,0,0,112,113,5,109,0,0,113,114,5,105,
        0,0,114,115,5,110,0,0,115,116,5,117,0,0,116,117,5,115,0,0,117,20,
        1,0,0,0,118,119,5,116,0,0,119,120,5,105,0,0,120,121,5,109,0,0,121,
        122,5,101,0,0,122,123,5,115,0,0,123,22,1,0,0,0,124,125,5,100,0,0,
        125,126,5,105,0,0,126,127,5,118,0,0,127,128,5,105,0,0,128,129,5,
        100,0,0,129,130,5,101,0,0,130,131,5,100,0,0,131,132,5,32,0,0,132,
        133,5,98,0,0,133,134,5,121,0,0,134,24,1,0,0,0,135,136,5,97,0,0,136,
        137,5,110,0,0,137,138,5,100,0,0,138,26,1,0,0,0,139,140,5,111,0,0,
        140,141,5,114,0,0,141,28,1,0,0,0,142,143,5,110,0,0,143,144,5,111,
        0,0,144,145,5,116,0,0,145,30,1,0,0,0,146,147,5,105,0,0,147,148,5,
        115,0,0,148,32,1,0,0,0,149,150,5,105,0,0,150,151,5,115,0,0,151,152,
        5,32,0,0,152,153,5,110,0,0,153,154,5,111,0,0,154,155,5,116,0,0,155,
        34,1,0,0,0,156,157,5,108,0,0,157,158,5,101,0,0,158,159,5,115,0,0,
        159,160,5,115,0,0,160,161,5,32,0,0,161,162,5,116,0,0,162,163,5,104,
        0,0,163,164,5,97,0,0,164,165,5,110,0,0,165,36,1,0,0,0,166,167,5,
        103,0,0,167,168,5,114,0,0,168,169,5,101,0,0,169,170,5,97,0,0,170,
        171,5,116,0,0,171,172,5,101,0,0,172,173,5,114,0,0,173,174,5,32,0,
        0,174,175,5,116,0,0,175,176,5,104,0,0,176,177,5,97,0,0,177,178,5,
        110,0,0,178,38,1,0,0,0,179,180,5,40,0,0,180,40,1,0,0,0,181,182,5,
        41,0,0,182,42,1,0,0,0,183,184,5,98,0,0,184,185,5,101,0,0,185,186,
        5,99,0,0,186,187,5,111,0,0,187,188,5,109,0,0,188,189,5,101,0,0,189,
        190,5,115,0,0,190,44,1,0,0,0,191,192,5,46,0,0,192,46,1,0,0,0,193,
        194,5,115,0,0,194,195,5,97,0,0,195,196,5,121,0,0,196,48,1,0,0,0,
        197,198,5,108,0,0,198,199,5,101,0,0,199,200,5,116,0,0,200,50,1,0,
        0,0,201,203,7,2,0,0,202,201,1,0,0,0,203,204,1,0,0,0,204,202,1,0,
        0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,207,6,25,0,0,207,52,1,0,
        0,0,8,0,78,84,86,97,102,104,204,1,6,0,0
    ]

class EnglishLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    NUMBER = 4
    BOOLEAN = 5
    ID = 6
    PLUS = 7
    MINUS = 8
    MULTIPLY = 9
    DIVIDE = 10
    AND = 11
    OR = 12
    NOT = 13
    EQUAL = 14
    NOTEQUAL = 15
    LESS = 16
    GREATER = 17
    LPAREN = 18
    RPAREN = 19
    ASSIGN = 20
    SEMICOLON = 21
    PRINT = 22
    VAR = 23
    WS = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'be'", "'number'", "'boolean'", "'plus'", "'minus'", "'times'", 
            "'divided by'", "'and'", "'or'", "'not'", "'is'", "'is not'", 
            "'less than'", "'greater than'", "'('", "')'", "'becomes'", 
            "'.'", "'say'", "'let'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "BOOLEAN", "ID", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
            "AND", "OR", "NOT", "EQUAL", "NOTEQUAL", "LESS", "GREATER", 
            "LPAREN", "RPAREN", "ASSIGN", "SEMICOLON", "PRINT", "VAR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "DIGIT", "LETTER", "NUMBER", "BOOLEAN", 
                  "ID", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "AND", "OR", 
                  "NOT", "EQUAL", "NOTEQUAL", "LESS", "GREATER", "LPAREN", 
                  "RPAREN", "ASSIGN", "SEMICOLON", "PRINT", "VAR", "WS" ]

    grammarFileName = "EnglishLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


