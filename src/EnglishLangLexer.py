# Generated from EnglishLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,303,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,
        1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,
        1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,
        1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,
        1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,4,43,254,8,43,
        11,43,12,43,255,1,43,1,43,4,43,260,8,43,11,43,12,43,261,3,43,264,
        8,43,1,44,1,44,1,44,5,44,269,8,44,10,44,12,44,272,9,44,1,44,1,44,
        1,45,1,45,1,45,1,46,1,46,5,46,281,8,46,10,46,12,46,284,9,46,1,47,
        4,47,287,8,47,11,47,12,47,288,1,47,1,47,1,48,1,48,1,48,1,48,5,48,
        297,8,48,10,48,12,48,300,9,48,1,48,1,48,0,0,49,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,0,93,46,95,47,97,48,
        1,0,7,1,0,48,57,2,0,34,34,92,92,8,0,34,34,47,47,92,92,98,98,102,
        102,110,110,114,114,116,116,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,309,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
        0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,93,1,0,0,0,
        0,95,1,0,0,0,0,97,1,0,0,0,1,99,1,0,0,0,3,102,1,0,0,0,5,105,1,0,0,
        0,7,108,1,0,0,0,9,111,1,0,0,0,11,114,1,0,0,0,13,117,1,0,0,0,15,124,
        1,0,0,0,17,128,1,0,0,0,19,134,1,0,0,0,21,139,1,0,0,0,23,146,1,0,
        0,0,25,148,1,0,0,0,27,153,1,0,0,0,29,159,1,0,0,0,31,162,1,0,0,0,
        33,167,1,0,0,0,35,171,1,0,0,0,37,177,1,0,0,0,39,182,1,0,0,0,41,190,
        1,0,0,0,43,196,1,0,0,0,45,203,1,0,0,0,47,208,1,0,0,0,49,210,1,0,
        0,0,51,212,1,0,0,0,53,214,1,0,0,0,55,216,1,0,0,0,57,218,1,0,0,0,
        59,220,1,0,0,0,61,222,1,0,0,0,63,224,1,0,0,0,65,227,1,0,0,0,67,230,
        1,0,0,0,69,232,1,0,0,0,71,234,1,0,0,0,73,237,1,0,0,0,75,240,1,0,
        0,0,77,242,1,0,0,0,79,244,1,0,0,0,81,246,1,0,0,0,83,248,1,0,0,0,
        85,250,1,0,0,0,87,253,1,0,0,0,89,265,1,0,0,0,91,275,1,0,0,0,93,278,
        1,0,0,0,95,286,1,0,0,0,97,292,1,0,0,0,99,100,5,43,0,0,100,101,5,
        61,0,0,101,2,1,0,0,0,102,103,5,45,0,0,103,104,5,61,0,0,104,4,1,0,
        0,0,105,106,5,42,0,0,106,107,5,61,0,0,107,6,1,0,0,0,108,109,5,47,
        0,0,109,110,5,61,0,0,110,8,1,0,0,0,111,112,5,43,0,0,112,113,5,43,
        0,0,113,10,1,0,0,0,114,115,5,45,0,0,115,116,5,45,0,0,116,12,1,0,
        0,0,117,118,5,115,0,0,118,119,5,116,0,0,119,120,5,114,0,0,120,121,
        5,105,0,0,121,122,5,110,0,0,122,123,5,103,0,0,123,14,1,0,0,0,124,
        125,5,105,0,0,125,126,5,110,0,0,126,127,5,116,0,0,127,16,1,0,0,0,
        128,129,5,102,0,0,129,130,5,108,0,0,130,131,5,111,0,0,131,132,5,
        97,0,0,132,133,5,116,0,0,133,18,1,0,0,0,134,135,5,98,0,0,135,136,
        5,111,0,0,136,137,5,111,0,0,137,138,5,108,0,0,138,20,1,0,0,0,139,
        140,5,109,0,0,140,141,5,97,0,0,141,142,5,116,0,0,142,143,5,114,0,
        0,143,144,5,105,0,0,144,145,5,120,0,0,145,22,1,0,0,0,146,147,5,33,
        0,0,147,24,1,0,0,0,148,149,5,116,0,0,149,150,5,114,0,0,150,151,5,
        117,0,0,151,152,5,101,0,0,152,26,1,0,0,0,153,154,5,102,0,0,154,155,
        5,97,0,0,155,156,5,108,0,0,156,157,5,115,0,0,157,158,5,101,0,0,158,
        28,1,0,0,0,159,160,5,105,0,0,160,161,5,102,0,0,161,30,1,0,0,0,162,
        163,5,101,0,0,163,164,5,108,0,0,164,165,5,115,0,0,165,166,5,101,
        0,0,166,32,1,0,0,0,167,168,5,102,0,0,168,169,5,111,0,0,169,170,5,
        114,0,0,170,34,1,0,0,0,171,172,5,119,0,0,172,173,5,104,0,0,173,174,
        5,105,0,0,174,175,5,108,0,0,175,176,5,101,0,0,176,36,1,0,0,0,177,
        178,5,102,0,0,178,179,5,117,0,0,179,180,5,110,0,0,180,181,5,99,0,
        0,181,38,1,0,0,0,182,183,5,100,0,0,183,184,5,105,0,0,184,185,5,115,
        0,0,185,186,5,112,0,0,186,187,5,108,0,0,187,188,5,97,0,0,188,189,
        5,121,0,0,189,40,1,0,0,0,190,191,5,112,0,0,191,192,5,114,0,0,192,
        193,5,105,0,0,193,194,5,110,0,0,194,195,5,116,0,0,195,42,1,0,0,0,
        196,197,5,114,0,0,197,198,5,101,0,0,198,199,5,116,0,0,199,200,5,
        117,0,0,200,201,5,114,0,0,201,202,5,110,0,0,202,44,1,0,0,0,203,204,
        5,112,0,0,204,205,5,108,0,0,205,206,5,111,0,0,206,207,5,116,0,0,
        207,46,1,0,0,0,208,209,5,59,0,0,209,48,1,0,0,0,210,211,5,44,0,0,
        211,50,1,0,0,0,212,213,5,61,0,0,213,52,1,0,0,0,214,215,5,43,0,0,
        215,54,1,0,0,0,216,217,5,45,0,0,217,56,1,0,0,0,218,219,5,42,0,0,
        219,58,1,0,0,0,220,221,5,47,0,0,221,60,1,0,0,0,222,223,5,37,0,0,
        223,62,1,0,0,0,224,225,5,61,0,0,225,226,5,61,0,0,226,64,1,0,0,0,
        227,228,5,33,0,0,228,229,5,61,0,0,229,66,1,0,0,0,230,231,5,60,0,
        0,231,68,1,0,0,0,232,233,5,62,0,0,233,70,1,0,0,0,234,235,5,60,0,
        0,235,236,5,61,0,0,236,72,1,0,0,0,237,238,5,62,0,0,238,239,5,61,
        0,0,239,74,1,0,0,0,240,241,5,40,0,0,241,76,1,0,0,0,242,243,5,41,
        0,0,243,78,1,0,0,0,244,245,5,91,0,0,245,80,1,0,0,0,246,247,5,93,
        0,0,247,82,1,0,0,0,248,249,5,123,0,0,249,84,1,0,0,0,250,251,5,125,
        0,0,251,86,1,0,0,0,252,254,7,0,0,0,253,252,1,0,0,0,254,255,1,0,0,
        0,255,253,1,0,0,0,255,256,1,0,0,0,256,263,1,0,0,0,257,259,5,46,0,
        0,258,260,7,0,0,0,259,258,1,0,0,0,260,261,1,0,0,0,261,259,1,0,0,
        0,261,262,1,0,0,0,262,264,1,0,0,0,263,257,1,0,0,0,263,264,1,0,0,
        0,264,88,1,0,0,0,265,270,5,34,0,0,266,269,3,91,45,0,267,269,8,1,
        0,0,268,266,1,0,0,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,
        0,0,270,271,1,0,0,0,271,273,1,0,0,0,272,270,1,0,0,0,273,274,5,34,
        0,0,274,90,1,0,0,0,275,276,5,92,0,0,276,277,7,2,0,0,277,92,1,0,0,
        0,278,282,7,3,0,0,279,281,7,4,0,0,280,279,1,0,0,0,281,284,1,0,0,
        0,282,280,1,0,0,0,282,283,1,0,0,0,283,94,1,0,0,0,284,282,1,0,0,0,
        285,287,7,5,0,0,286,285,1,0,0,0,287,288,1,0,0,0,288,286,1,0,0,0,
        288,289,1,0,0,0,289,290,1,0,0,0,290,291,6,47,0,0,291,96,1,0,0,0,
        292,293,5,47,0,0,293,294,5,47,0,0,294,298,1,0,0,0,295,297,8,6,0,
        0,296,295,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,
        0,299,301,1,0,0,0,300,298,1,0,0,0,301,302,6,48,0,0,302,98,1,0,0,
        0,9,0,255,261,263,268,270,282,288,298,1,6,0,0
    ]

class EnglishLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ADD_TO = 1
    SUBTRACT_FROM = 2
    TIMES = 3
    DIVIDE_FROM = 4
    INCREMENT = 5
    DECREMENT = 6
    TYPE_STRING = 7
    TYPE_INT = 8
    TYPE_FLOAT = 9
    TYPE_BOOL = 10
    TYPE_MATRIX = 11
    NOT = 12
    TRUE_VALUE = 13
    FALSE_VALUE = 14
    IF_INSTR = 15
    ELSE_INSTR = 16
    FOR_INSTR = 17
    WHILE_INSTR = 18
    FUNC_INSTR = 19
    DISPLAY_INSTR = 20
    PRINT_INSTR = 21
    RETURN_INSTR = 22
    PLOT_INSTR = 23
    SEMICOLON = 24
    COMMA = 25
    ASSIGN = 26
    PLUS = 27
    MINUS = 28
    MULTIPLY = 29
    DIVIDE = 30
    MODULO = 31
    EQUAL = 32
    NOT_EQUAL = 33
    LESS_THAN = 34
    GREATER_THAN = 35
    LESS_EQUAL = 36
    GREATER_EQUAL = 37
    LEFT_PAREN = 38
    RIGHT_PAREN = 39
    LEFT_BRACKET = 40
    RIGHT_BRACKET = 41
    LEFT_BRACE = 42
    RIGHT_BRACE = 43
    NUMBER = 44
    STRING = 45
    IDENTIFIER = 46
    WHITE_SPACE = 47
    COMMENT = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+='", "'-='", "'*='", "'/='", "'++'", "'--'", "'string'", 
            "'int'", "'float'", "'bool'", "'matrix'", "'!'", "'true'", "'false'", 
            "'if'", "'else'", "'for'", "'while'", "'func'", "'display'", 
            "'print'", "'return'", "'plot'", "';'", "','", "'='", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", "'>'", "'<='", 
            "'>='", "'('", "')'", "'['", "']'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "ADD_TO", "SUBTRACT_FROM", "TIMES", "DIVIDE_FROM", "INCREMENT", 
            "DECREMENT", "TYPE_STRING", "TYPE_INT", "TYPE_FLOAT", "TYPE_BOOL", 
            "TYPE_MATRIX", "NOT", "TRUE_VALUE", "FALSE_VALUE", "IF_INSTR", 
            "ELSE_INSTR", "FOR_INSTR", "WHILE_INSTR", "FUNC_INSTR", "DISPLAY_INSTR", 
            "PRINT_INSTR", "RETURN_INSTR", "PLOT_INSTR", "SEMICOLON", "COMMA", 
            "ASSIGN", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "EQUAL", 
            "NOT_EQUAL", "LESS_THAN", "GREATER_THAN", "LESS_EQUAL", "GREATER_EQUAL", 
            "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", 
            "LEFT_BRACE", "RIGHT_BRACE", "NUMBER", "STRING", "IDENTIFIER", 
            "WHITE_SPACE", "COMMENT" ]

    ruleNames = [ "ADD_TO", "SUBTRACT_FROM", "TIMES", "DIVIDE_FROM", "INCREMENT", 
                  "DECREMENT", "TYPE_STRING", "TYPE_INT", "TYPE_FLOAT", 
                  "TYPE_BOOL", "TYPE_MATRIX", "NOT", "TRUE_VALUE", "FALSE_VALUE", 
                  "IF_INSTR", "ELSE_INSTR", "FOR_INSTR", "WHILE_INSTR", 
                  "FUNC_INSTR", "DISPLAY_INSTR", "PRINT_INSTR", "RETURN_INSTR", 
                  "PLOT_INSTR", "SEMICOLON", "COMMA", "ASSIGN", "PLUS", 
                  "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "EQUAL", "NOT_EQUAL", 
                  "LESS_THAN", "GREATER_THAN", "LESS_EQUAL", "GREATER_EQUAL", 
                  "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", 
                  "LEFT_BRACE", "RIGHT_BRACE", "NUMBER", "STRING", "ESC", 
                  "IDENTIFIER", "WHITE_SPACE", "COMMENT" ]

    grammarFileName = "EnglishLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


